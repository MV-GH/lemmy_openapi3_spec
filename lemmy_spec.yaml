openapi: "3.0.3"
info:
  title: Unofficial Lemmy OpenAPI Spec
  version: v0.18.3
  license:
    name: AGPLv3
    url: https://www.gnu.org/licenses/agpl-3.0.en.html#license-text
  x-logo:
    url: https://raw.githubusercontent.com/LemmyNet/lemmy-ui/main/src/assets/icons/favicon.svg
    altText: Lemmy Icon
    href: https://github.com/MV-GH/lemmy_openapi_spec
  contact:
    url: https://github.com/MV-GH/lemmy_openapi_spec
servers:
  - url: https://lemmy.ml/api/v3
components:
  schemas:
    errorResponseRegistration:
     properties:
       error:
         type: string
         enum:
           - registration_closed
           - email_required
           - registration_application_answer_required
           - passwords_do_not_match
           - captcha_incorrect
           - email_already_exists
           - user_already_exists




paths:
  /site:
    get:
      tags:
        - Site
      parameters:
        - name: GetSite
          in: query
          schema:
            $ref: 'components.yaml#/components/schemas/GetSite'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/SiteResponse'
    post:
      tags:
        - Site
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/CreateSite'
      responses:
        "201":
          description: Created
    put:
      tags:
        - Site
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/EditSite'
      responses:
        "200":
          description: Ok
  /modlog:
    get:
      parameters:
        - name: GetModlog
          in: query
          schema:
            $ref: 'components.yaml#/components/schemas/GetModlog'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/GetModlogResponse'

  /search:
    get:
      parameters:
        - name: Search
          in: query
          schema:
            $ref: 'components.yaml#/components/schemas/Search'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/SearchResponse'

  /resolve_object:
    get:
      parameters:
        - name: ResolveObject
          in: query
          schema:
            $ref: 'components.yaml#/components/schemas/ResolveObject'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/ResolveObjectResponse'
  /community:
    get:
      tags:
        - Community
      parameters:
        - name: Community
          in: query
          schema:
            $ref: 'components.yaml#/components/schemas/Community'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommunityResponse'
    post:
      tags:
        - Community
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/CreateCommunity'
      responses:
        "201":
          description: CREATED
    put:
      tags:
        - Community
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/CreateCommunity'
      responses:
        "200":
          description: OK
  /community/hide:
    put:
      tags:
        - Community
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/HideCommunity'
      responses:
        "200":
          description: OK
  /community/list:
    get:
      tags:
          - Community
      parameters:
        - name: ListCommunities
          in: query
          schema:
            $ref: 'components.yaml#/components/schemas/ListCommunities'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/ListCommunitiesResponse'
  /community/follow:
    post:
      tags:
        - Community
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/FollowCommunity'
      responses:
        "201":
          description: OK
  /community/block:
    post:
      tags:
        - Community
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/BlockCommunity'
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/BlockCommunityResponse'
  /community/delete:
    post:
      tags:
        - Community
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/DeleteCommunity'
      responses:
        "201":
          description: OK
  /community/remove:
    post:
      tags:
        - Community
        - Mod
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/RemoveCommunity'
      responses:
        "201":
          description: OK
  /community/transfer:
    post:
      tags:
        - Community
        - Mod
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/TransferCommunity'
      responses:
        "201":
          description: OK
  /community/ban_user:
    post:
      tags:
        - Community
        - Mod
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/BanFromCommunity'
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/BanFromCommunityResponse'
  /community/mod:
    post:
      tags:
        - Community
        - Mod
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/AddModToCommunity'
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/AddModToCommunityResponse'
  /federated_instances:
    get:
      parameters:
        - name: GetFederatedInstances
          in: query
          schema:
            $ref: 'components.yaml#/components/schemas/GetFederatedInstances'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/GetFederatedInstancesResponse'
  /post:
    get:
      tags:
        - Post
      parameters:
        - name: GetPost
          in: query
          schema:
            $ref: 'components.yaml#/components/schemas/GetPost'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/GetPostResponse'
    put:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/EditPost'
      responses:
        200:
          description: OK

    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/CreatePost'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PostResponse'
  /post/list:
    get:
      tags:
        - Post
      parameters:
        - name: ListPosts
          in: query
          schema:
            $ref: "components.yaml#/components/schemas/GetPosts"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/GetPostsResponse'
  /post/delete:
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/DeletePost'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PostResponse'
  /post/remove:
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/RemovePost'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PostResponse'
  /post/mark_as_read:
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/MarkPostAsRead'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PostResponse'
  /post/lock:
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/LockPost'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PostResponse'
  /post/feature:
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/FeaturePost'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PostResponse'
  /post/like:
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/CreatePostLike'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PostResponse'
  /post/save:
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/SavePost'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PostResponse'
  /post/report:
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/CreatePostReport'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PostReportResponse'
  /post/report/resolve:
    put:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/ResolvePostReport'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PostReportResponse'
  /post/report/list:
    get:
      tags:
        - Post
      parameters:
        - name: ListPostReports
          in: query
          schema:
            $ref: 'components.yaml#/components/schemas/ListPostReports'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/ListPostReportsResponse'
  /post/site_metadata:
    get:
      tags:
        - Post
      parameters:
        - name: GetSiteMetadata
          in: query
          schema:
            $ref: 'components.yaml#/components/schemas/GetSiteMetadata'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/GetSiteMetadataResponse'

  /comment:
    get:
      tags:
        - Comment
      parameters:
        - name: GetComment
          in: query
          schema:
            $ref: 'components.yaml#/components/schemas/GetComment'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommentResponse'
    post:
      tags:
        - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/CreateComment'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommentResponse'
    put:
      tags:
        - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/EditComment'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommentResponse'
  /comment/list:
    get:
      tags:
        - Comment
      parameters:
        - in: query
          name: GetComments
          schema:
            $ref: 'components.yaml#/components/schemas/GetComments'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/GetCommentsResponse'

  /comment/delete:
    post:
      tags:
        - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/DeleteComment'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommentResponse'
  /comment/remove:
    post:
      tags:
        - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/RemoveComment'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommentResponse'
  /comment/mark_as_read:
    post:
      tags:
        - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/MarkCommentReplyAsRead'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommentReplyResponse'
  /comment/distinguish:
    post:
      tags:
        - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/DistinguishComment'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommentResponse'
  /comment/like:
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/CreatePostLike'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PostResponse'
  /comment/save:
    post:
      tags:
        - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/SaveComment'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommentResponse'
  /comment/report:
    post:
      tags:
        - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/CreateCommentReport'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommentReportResponse'
  /comment/report/resolve:
    put:
      tags:
        - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/ResolveCommentReport'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/CommentReportResponse'
  /comment/report/list:
    get:
      tags:
        - Comment
      parameters:
        - name: ListCommentReports
          in: query
          schema:
            $ref: 'components.yaml#/components/schemas/ListCommentReports'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/ListCommentReportsResponse'

  /private_message:
    put:
      tags:
        - PrivateMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/EditPrivateMessage'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PrivateMessageResponse'

    post:
      tags:
        - PrivateMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/CreatePrivateMessage'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PrivateMessageResponse'
  /private_message/list:
    get:
      tags:
        - PrivateMessage
      parameters:
        - in: query
          name: GetPrivateMessages
          schema:
            $ref: 'components.yaml#/components/schemas/GetPrivateMessages'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PrivateMessagesResponse'
  /private_message/delete:
    post:
      tags:
        - PrivateMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/DeletePrivateMessage'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PrivateMessageResponse'
  /private_message/mark_as_read:
    post:
      tags:
        - PrivateMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/MarkPrivateMessageAsRead'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PrivateMessageResponse'
  /private_message/report:
    post:
      tags:
        - PrivateMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/CreatePrivateMessageReport'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PrivateMessageReportResponse'
  /private_message/report/resolve:
    put:
      tags:
        - PrivateMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/ResolvePrivateMessageReport'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/PrivateMessageReportResponse'
  /private_message/report/list:
    get:
      tags:
        - PrivateMessage
      parameters:
        - name: ListPrivateMessageReports
          in: query
          schema:
            $ref: 'components.yaml#/components/schemas/ListPrivateMessageReports'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/ListPrivateMessageReportsResponse'
  /user/register:
    post:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/components/schemas/Register'
      responses:
        201:
          description: CREATED
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/LoginResponse'
                description: JWT will be empty if registration requires email verification or application approval
        400:
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseRegistration'
